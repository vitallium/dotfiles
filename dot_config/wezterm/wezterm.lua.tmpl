local wezterm = require("wezterm")
local config = wezterm.config_builder()

local act = wezterm.action
local mod = "ALT|SHIFT"

local function scheme_for_appearance(appearance)
    if appearance:find("Dark") then
        return "Modus-Vivendi"
    else
        return "Modus-Operandi"
    end
end

wezterm.on("window-config-reloaded", function(window)
    local overrides = window:get_config_overrides() or {}
    local appearance = window:get_appearance()
    local scheme = scheme_for_appearance(appearance)
    if overrides.color_scheme ~= scheme then
        overrides.color_scheme = scheme
        window:set_config_overrides(overrides)
    end
end)

-- Font
config.window_frame = {
    font_size = 12,
}
config.command_palette_font_size = 16
config.command_palette_rows = 15
config.font = wezterm.font_with_fallback({
    { family = "{{ .wezterm.font.name }}", weight = "Regular" },
})
config.font_size = {{ .wezterm.font.size }}
config.freetype_load_target = "Light"
config.front_end = "OpenGL"

-- Colors
config.color_scheme = "Modus-Operandi"
config.enable_scroll_bar = false

-- Tab
config.tab_max_width = 60
config.hide_tab_bar_if_only_one_tab = true
config.use_fancy_tab_bar = false

-- Window
config.window_close_confirmation = "NeverPrompt"
config.adjust_window_size_when_changing_font_size = false

-- Bell
config.audible_bell = "Disabled"
config.visual_bell = {
    fade_in_function = "EaseIn",
    fade_in_duration_ms = 100,
    fade_out_function = "EaseOut",
    fade_out_duration_ms = 100,
}

-- General
config.clean_exit_codes = { 130 }
config.automatically_reload_config = true
config.scrollback_lines = 10000
config.front_end = "OpenGL"

-- Key bindings
config.send_composed_key_when_left_alt_is_pressed = false
config.send_composed_key_when_right_alt_is_pressed = true
config.keys = {
    { mods = "ALT", key = "Enter", action = act.DisableDefaultAssignment },
    { mods = mod, key = "k", action = act.ActivatePaneDirection("Up") },
    { mods = mod, key = "j", action = act.ActivatePaneDirection("Down") },
    { mods = mod, key = "l", action = act.ActivatePaneDirection("Right") },
    { mods = mod, key = "h", action = act.ActivatePaneDirection("Left") },
    { mods = mod, key = "|", action = act.SplitHorizontal({ domain = "CurrentPaneDomain" }) },
    { mods = mod, key = "_", action = act.SplitVertical({ domain = "CurrentPaneDomain" }) },
    { mods = mod, key = ">", action = act.MoveTabRelative(1) },
    { mods = mod, key = "<", action = act.MoveTabRelative(-1) },
    { mods = mod, key = "M", action = act.TogglePaneZoomState },
    { mods = "SHIFT|SUPER", key = "p", action = act.ActivateCommandPalette },
    { key = "UpArrow", mods = "SHIFT", action = act.ScrollToPrompt(-1) },
    { key = "DownArrow", mods = "SHIFT", action = act.ScrollToPrompt(1) },
}

return config
