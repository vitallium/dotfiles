#+title: Fedora installation guide

* Post installation steps
Install updates.
#+begin_src sh :dir /sudo::
dnf upgrade --refresh
#+end_src

Change the hostname to ~serenity~.
#+begin_src shell :dir /sudo::
hostnamectl set-hostname serenity
#+end_src

Verify the hostname.
#+begin_src sh
hostnamectl hostname
#+end_src

Reboot the system to install and apply updates.

Open ~Settings~ and verify the following settings:
- Refresh rate is set to 144Hz for an external monitor.
- Scaling is set to ~100%~.
- Go to ~Accessibility~.
- Enable ~Large Text~.
- Change Cursor Size to ~Medium~.

TODO: Check if these settings can be configured with ~dconf~.

Remove redundant stuff.
#+begin_src sh :dir /sudo::
dnf remove -y cheese rhythmbox totem orca \
              gnome-contacts gnome-getting-started-docs \
              nautilus-sendto gnome-shell-extension-* \
              libreoffice-* gnome-characters gnome-maps \
              gnome-photos simple-scan virtualbox-guest-additions \
              gedit gnome-tour gnome-connections mediawriter yelp \
              podman
dnf autoremove -y
#+end_src

Configure ~dnf~.
#+begin_src sh :dir /sudo::
echo 'max_parallel_downloads=10' | tee -a /etc/dnf/dnf.conf
echo 'deltarpm=true' | tee -a /etc/dnf/dnf.conf
#+end_src

Enable ~fstrim~.
#+begin_src sh :dir /sudo::
systemctl enable fstrim.timer
#+end_src

Adjust ~btrfs~ mount options (taken from [[https://mutschler.dev/linux/fedora-post-install/#btrfs-filesystem-optimizations][here]]):
- ~ssd~: use SSD specific options for optimal use on SSD and NVME
- ~noatime~: prevent frequent disk writes by instructing the Linux kernel not to store the last access time of files and folders
- ~space_cache~: allows btrfs to store free space cache on the disk to make caching of a block group much quicker
- ~commit=120~: time interval in which data is written to the filesystem (value of 120 is taken from Manjaroâ€™s minimal iso)
- ~compress=zstd~: allows to specify the compression algorithm which we want to use. btrfs provides lzo, zstd and zlib compression algorithms. Based on some Phoronix test cases, zstd seems to be the better performing candidate.
- ~discard=async~: Btrfs Async Discard Support Looks To Be Ready For Linux 5.6.

Remount all paritions.
#+begin_src sh :dir /sudo::
mount -a
#+end_src

Change default user shell to ~fish~.
#+begin_src sh :dir /sudo::
dnf install -y fish util-linux-user
chsh -s $(which fish) vitaly
#+end_src

Install Gnome extensions applications.
#+begin_src shell :tangle no :dir /sudo:: :results output
dnf install -y gnome-extensions-app gnome-tweaks
#+end_src

Enable RPM Fusion repositories.
#+begin_src shell :tangle no :dir /sudo:: :results output
dnf install -y https://download1.rpmfusion.org/free/fedora/rpmfusion-free-release-$(rpm -E %fedora).noarch.rpm
dnf install -y https://download1.rpmfusion.org/nonfree/fedora/rpmfusion-nonfree-release-$(rpm -E %fedora).noarch.rpm
#+end_src

Enable ~emacs~ with native-comp copr.
#+begin_src shell :tangle no :dir /sudo:: :results output
dnf copr enable -y deathwish/emacs-pgtk-nativecomp
dnf install -y emacs
#+end_src

Install drivers for Intel GPU.
#+begin_src shell :tangle no :dir /sudo:: :results output
dnf groupinstall -y multimedia
dnf install -y intel-media-driver ffmpeg libva \
               libva-utils gstreamer1-vaapi ffmpeg \
               intel-gpu-tools mesa-dri-drivers
#+end_src

Enable Intel GuC and HuC and Framebuffer compression.
#+begin_src shell :tangle no :dir /sudo:: :results no
echo 'options i915 enable_guc=2' > /etc/modprobe.d/i915.conf
echo 'options i915 enable_fbc=3' >> /etc/modprobe.d/i915.conf
#+end_src

Verify options for ~i915~.
#+begin_src shell :tangle no :results output
cat /etc/modprobe.d/i915.conf
#+end_src

Rebuild ~initramfs~.
#+begin_src shell :tangle no :dir /sudo:: :results output
dracut --force
#+end_src

Enable and install OpenH264 for Firefox.
#+begin_src shell :tangle no :dir /sudo:: :results output
dnf config-manager --set-enabled fedora-cisco-openh264
dnf install -y gstreamer1-plugin-openh264 mozilla-openh264
#+end_src

Configure system settings.
#+begin_src shell :tangle no :dir /sudo:: :results output
echo 'fs.inotify.max_user_watches = 524288' >> /etc/sysctl.conf
echo 'vm.swappiness = 10' >> /etc/sysctl.conf
sysctl -p
#+end_src

Enable Visual Studio Code repository and install it.
#+begin_src shell :tangle no :dir /sudo:: :results output
rpm --import https://packages.microsoft.com/keys/microsoft.asc
sh -c 'echo -e "[code]\nname=Visual Studio Code\nbaseurl=https://packages.microsoft.com/yumrepos/vscode\nenabled=1\ngpgcheck=1\ngpgkey=https://packages.microsoft.com/keys/microsoft.asc" > /etc/yum.repos.d/vscode.repo'
dnf install -y code
#+end_src

Instal ~Development Tools~.
#+begin_src shell :tangle no :dir /sudo:: :results output
dnf install -y make gcc-c++ gcc make bzip2 openssl-devel libyaml-devel libffi-devel readline-devel zlib-devel gdbm-devel ncurses-devel
#+end_src

Install other packages I use.
#+begin_src shell :tangle no :dir /sudo:: :results output
dnf install -y git git-lfs git-delta \
               bat fzf ripgrep fd-find \
               profile-sync-daemon \
               editorconfig maildir-utils \
               kernel-tools wl-clipboard \
               cmake ninja-build jq \
               celluloid
#+end_src

Install packages for ~Yubikey~.
#+begin_src shell :tangle no :dir /sudo:: :results output
dnf install -y gpg gnupg2 gnupg-pkcs11-scd pcsc-tools opensc pcsc-lite-ccid
systemctl enable --now pcscd
#+end_src

Install [[https://keybase.io/][Keybase]].
#+begin_src shell :tangle no :dir 
/sudo:: :results output
dnf install -y https://prerelease.keybase.io/keybase_amd64.rpm
#+end_src

Enable Google Chrome repo and install it.
#+begin_src shell :tangle no :dir /sudo:: :results output
dnf config-manager --set-enabled google-chrome
dnf install -y google-chrome-stable
#+end_src

Disable ~Spectre~ mitigations.
#+begin_src shell :tangle no :dir /sudo:: :results output
grubby --update-kernel=ALL --args=mitigations=off
#+end_src

Enable [[https://github.com/lassekongo83/adw-gtk3][adw3]] copr and install ~adwaita~ theme for legacy applications.
#+begin_src shell :tangle no :dir /sudo:: :results output
dnf copr enable -y nickavem/adw-gtk3
dnf install -y adw-gtk3
#+end_src

** Enable and install ~neovim~ stuff.
#+begin_src shell :tangle no :dir /sudo:: :results output
dnf copr enable -y vitallium/neovim-default-editor
dnf install -y --allowerasing neovim-default-editor
dnf remove -y nano
#+end_src

TODO: Enable copr for with symlinks ~vim => nvim~.
* Configure user environment
Install [[https://github.com/doomemacs][doomemacs]].
#+begin_src shell :tangle no :results output
git clone --depth 1 --single-branch https://github.com/doomemacs/doomemacs ~/.config/emacs
~/.config/emacs/bin/doom install --force
#+end_src

Enable [[https://flatpak.org/setup/Fedora][flathub]].
#+begin_src shell :tangle no :dir /sudo:: :results output
flatpak remote-add --if-not-exists flathub https://flathub.org/repo/flathub.flatpakrepo
flatpak remote-modify flathub --enable
#+end_src

Install ~flatpaks~.
#+begin_src shell :tangle no :results output
flatpak install -y flathub com.discordapp.Discord \
                           com.spotify.Client \
                           org.telegram.desktop \
                           us.zoom.Zoom \
                           com.slack.Slack \
                           com.github.tchx84.Flatseal \
                           org.gtk.Gtk3theme.adw-gtk3 org.gtk.Gtk3theme.adw-gtk3-dark
#+end_src

Install ~git-lfs~.
#+begin_src shell :tangle no :results output
git-lfs install
#+end_src

Enable ~profile-sync-daemon~.
#+begin_src shell :tangle no :results output
psd
systemctl --user enable --now psd.service
psd preview
#+end_src

Install [[https://github.com/rafaelmardojai/firefox-gnome-theme][firefox-gnome-theme]].
#+begin_src shell :tangle no :results output
git clone https://github.com/rafaelmardojai/firefox-gnome-theme/ $HOME/Development/firefox-gnome-theme
cd $HOME/Development/firefox-gnome-theme
./scripts/install.sh
#+end_src

Install [[https://asdf-vm.com/][asdf]].
#+begin_src shell :tangle no :results output
git clone https://github.com/asdf-vm/asdf.git ~/.asdf --branch v0.10.0
#+end_src

Install [[https://github.com/vitallium/dotfiles][dotfiles]].
#+begin_src shell :tangle no :results output
git clone https://github.com/vitallium/dotfiles.git $HOME/Development/dotfiles
cd $HOME/Development/dotfiles
./install.sh
#+end_src

Clean up unused directories and bookmarks.
#+begin_src shell :tangle no :results output
rm -R ~/Documents ~/Music ~/Public ~/Templates ~/Desktop
echo "file:///home/vitaly/Downloads" > ~/.config/gtk-3.0/bookmarks
#+end_src
