#+TITLE:    My Doom Emacs Configuration
#+AUTHOR:   Vitaly Slobodin
#+startup:  fold
#+property: header-args:emacs-lisp :tangle yes :comments link
#+property: header-args:elisp :exports code
#+property: header-args :tangle no :results silent :eval no-export
* DOOM configuration
:PROPERTIES:
:header-args:emacs-lisp: :tangle no
:END:
Doom has this lovely /modular configuration base/ that takes a lot of work out of
configuring Emacs. Each module (when enabled) can provide a list of packages to
install (on ~doom sync~) and configuration to be applied. The modules can also
have flags applied to tweak their behaviour.

#+name: init.el
#+begin_src emacs-lisp :tangle "init.el" :noweb no-export :comments none
;;; init.el -*- lexical-binding: t; -*-

;; This file controls what Doom modules are enabled and what order they load in.
;; Press 'K' on a module to view its documentation, and 'gd' to browse its directory.

(doom! :completion
       <<doom-completion>>

       :ui
       <<doom-ui>>

       :editor
       <<doom-editor>>

       :emacs
       <<doom-emacs>>

       :term
       <<doom-term>>

       :checkers
       <<doom-checkers>>

       :tools
       <<doom-tools>>

       :os
       <<doom-os>>

       :lang
       <<doom-lang>>

       :email
       <<doom-email>>

       :app
       <<doom-app>>

       :config
       <<doom-config>>
       )
#+end_src
** Modules
#+Name: doom-config
#+begin_src emacs-lisp
literate
(default +bindings +smartparens)
#+end_src

#+name: doom-completion
#+begin_src emacs-lisp
(company                     ; the ultimate code completion backend
 +childframe)
;;helm                       ; the *other* search engine for love and life
;;ido                        ; the other *other* search engine...
(vertico +icons)
;;(ivy                       ; a search engine for love and life
;; +prescient)               ; ... I know what I want(ed)
#+end_src

#+name: doom-ui
#+begin_src emacs-lisp
deft                         ; notational velocity for Emacs
doom                         ; what makes DOOM look the way it does
doom-dashboard               ; a nifty splash screen for Emacs
;; doom-quit                 ; DOOM quit-message prompts when you quit Emacs
;; (emoji +github)           ; ðŸ™‚
hl-todo                      ; highlight TODO/FIXME/NOTE/DEPRECATED/HACK/REVIEW
hydra                        ; quick documentation for related commands
;;indent-guides              ; highlighted indent columns, notoriously slow
;;minimap                    ; show a map of the code on the side
modeline                     ; snazzy, Atom-inspired modeline, plus API
nav-flash                    ; blink the current line after jumping
ophints                      ; highlight the region an operation acts on
(popup                       ; tame sudden yet inevitable temporary windows
 +all                        ; catch all popups that start with an asterix
 +defaults)                  ; default popup rules
;;(tabs                      ; an tab bar for Emacs
;;  +centaur-tabs)           ; ... with prettier tabs
(treemacs +lsp)              ; a project drawer, like neotree but cooler
;;unicode                    ; extended unicode support for various languages
vc-gutter                    ; vcs diff in the fringe
vi-tilde-fringe              ; fringe tildes to mark beyond EOB
(window-select +numbers)     ; visually switch windows
workspaces                   ; tab emulation, persistence & separate workspaces
zen                          ; distraction-free coding or writing
#+end_src

#+name: doom-editor
#+begin_src emacs-lisp
(evil +everywhere)           ; come to the dark side, we have cookies
file-templates               ; auto-snippets for empty files
fold                         ; (nigh) universal code folding
format                       ; automated prettiness
;;god                        ; run Emacs commands without modifier keys
;;lispy                      ; vim for lisp, for people who don't like vim
multiple-cursors             ; editing in many places at once
;;objed                      ; text object editing for the innocent
;;parinfer                   ; turn lisp into python, sort of
rotate-text                  ; cycle region at point between text candidates
snippets                     ; my elves. They type so I don't have to
;;word-wrap                  ; soft wrapping with language-aware indent
#+end_src

#+name: doom-emacs
#+begin_src emacs-lisp
(dired +ranger +icons)       ; making dired pretty [functional]
electric                     ; smarter, keyword-based electric-indent
(ibuffer +icons)             ; interactive buffer management
(undo +tree)                 ; persistent, smarter undo for your inevitable mistakes
vc                           ; version-control and Emacs, sitting in a tree
#+end_src

#+name: doom-term
#+begin_src emacs-lisp
;;eshell                     ; the elisp shell that works everywhere
;;shell                      ; simple shell REPL for Emacs
;;term                       ; basic terminal emulator for Emacs
vterm                        ; the best terminal emulation in Emacs
#+end_src


#+name: doom-checkers
#+begin_src emacs-lisp
(syntax +childframe)         ; tasing you for every semicolon you forget
(spell +hunspell +flyspell)  ; tasing you for misspelling mispelling
grammar                      ; tasing grammar mistake every you make
#+end_src

#+name: doom-tools
#+begin_src emacs-lisp
ansible
(debugger +lsp)              ; FIXME stepping through code, to help you add bugs
direnv
(docker +lsp)
editorconfig                 ; let someone else argue about tabs vs spaces
(eval +overlay)              ; run code, run (also, repls)
(lookup                      ; navigate your code and its documentation
  +docsets
  +dictionary
  +offline)
(lsp +peek)
magit                        ; a git porcelain for Emacs
make                         ; run make tasks from Emacs
;;pass                       ; password manager for nerds
rgb                          ; creating color strings
taskrunner                   ; taskrunner for all your projects
terraform                    ; infrastructure as code
;;tmux                       ; an API for interacting with tmux
;;upload                     ; map local to remote projects via ssh/ftp
#+end_src

#+name: doom-os
#+begin_src emacs-lisp
(:if IS-MAC macos)           ; improve compatibility with macOS
tty                          ; improve the terminal Emacs experience
#+end_src

#+name: doom-lang
#+begin_src emacs-lisp
(cc +lsp)           ; C/C++/Obj-C madness
;;clojure           ; java with a lisp
;;(common-lisp +lsp); if you've seen one lisp, you've seen them all
;;crystal           ; ruby at the speed of c
;;csharp            ; unity, .NET, and mono shenanigans
data                ; config/data formats
;;(dart +flutter)   ; paint ui and not much else
;;elixir            ; erlang done right
;;elm               ; care for a cup of TEA?
emacs-lisp          ; drown in parentheses
;;(erlang +lsp)     ; an elegant language for a more civilized age
(go +lsp)           ; the hipster dialect
;;(haskell +dante)  ; a language that's lazier than I am
(json +lsp)         ; At least it ain't XML
;;(java +meghanada) ; the poster child for carpal tunnel syndrome
(javascript +lsp)   ; all(hope(abandon(ye(who(enter(here))))))
;;latex             ; writing papers in Emacs has never been so fun
;;lean
;;factor
;;ledger            ; an accounting system in Emacs
;;lua               ; one-based indices? one-based indices
markdown            ; writing docs for people to ignore
;;(nix +lsp)        ; I hereby declare "nix geht mehr!"
;;ocaml             ; an objective camel
(org +babel
     +attach
     +export
     +journal
     +roam2
     +pretty
     +present)      ; organize your plain life in plain text
;;plantuml          ; diagrams for confusing people more
(python +lsp)       ; beautiful is better than ugly
;;qt                ; the 'cutest' gui framework ever
;;racket            ; a DSL for DSLs
rest                ; Emacs as a REST client
;;rst               ; ReST in peace
(ruby +lsp +rails)  ; 1.step {|i| p "Ruby is #{i.even? ? 'love' : 'life'}"}
(rust +lsp)         ; Fe2O3.unwrap().unwrap().unwrap().unwrap()
;;scala             ; java, but good
;;scheme            ; a fully conniving family of lisps
(sh +fish +lsp)     ; she sells {ba,z,fi}sh shells on the C xor
(web +lsp)          ; the tubes
(yaml +lsp)         ; JSON, but readable
#+end_src

#+name: doom-email
#+begin_src emacs-lisp
(:if (executable-find "mu") (mu4e +org +gmail))
;;(wanderlust +gmail)
#+end_src

#+name: doom-app
#+begin_src emacs-lisp
;;calendar                   ; A dated approach to timetabling
;;emms                       ; Multimedia in Emacs is music to my ears
everywhere                   ; *leave* Emacs!? You must be joking.
;;irc                        ; how neckbeards socialize
;;(rss +org)                 ; emacs as an RSS reader
;;twitter                    ; twitter client https://twitter.com/vnought
#+end_src
* Rudimentary configuration
Make this file run (slightly) faster with lexical binding (see [[https://nullprogram.com/blog/2016/12/22/][this blog post]]
for more info).
#+begin_src emacs-lisp :comments no
;;; config.el -*- lexical-binding: t; -*-
#+end_src

#+begin_src shell :exports none :comments no :tangle-mode (identity #o755)
#!/bin/bash
#+end_src
* Package management
:PROPERTIES:
:header-args:emacs-lisp: :tangle packages.el :comments link
:END:
This file shouldn't be byte compiled.
#+BEGIN_SRC emacs-lisp :tangle packages.el :comments no
;; -*- no-byte-compile: t; -*-
#+END_SRC
** Loading instructions
:PROPERTIES:
:header-args:emacs-lisp: :tangle no
:END:
* Basic configuration
#+BEGIN_SRC emacs-lisp :comments no
;;; config.el -*- lexical-binding: t; -*-
#+END_SRC
** Personal configuration
#+begin_src  emacs-lisp
(setq user-full-name "Vitaly Slobodin"
      user-mail-address "vslobodin@gitlab.com"
      auth-sources '("~/.authinfo.gpg"))
#+end_src
I prefer storing keybindings in a separate file:
#+begin_src emacs-lisp
(load! "+bindings")
#+end_src
** Customizations
By default changes made via a customisation interface are added to =init.el=.
I prefer the idea of using a separate file for this. We just need to change a
setting, and load it if it exists.
#+begin_src emacs-lisp
(setq-default custom-file (expand-file-name ".custom.el" doom-private-dir))
(when (file-exists-p custom-file)
  (load custom-file))
#+end_src

Enable local variables.
#+begin_src emacs-lisp
(put '+file-templates-dir 'safe-local-variable #'stringp)
#+end_src

Compile all elisp
#+begin_src emacs-lisp
(setq comp-deferred-compilation t)
#+end_src
** Additional stuff to work with strings
String inflections anyone?
#+begin_src emacs-lisp :tangle packages.el
(package! string-inflection)
#+end_src
Copy text to any format
#+begin_src emacs-lisp :tangle packages.el
(package! copy-as-format)
(package! crux)
#+end_src
** Evil
#+begin_src emacs-lisp
(after! evil
  (setq evil-ex-substitute-global t     ; I like my s/../.. to by global by default
        evil-move-cursor-back nil       ; Don't move the block cursor when toggling insert mode
        evil-kill-on-visual-paste nil)) ; Don't put overwritten text in the kill ring
#+end_src

Disable evil-escape because it *may* have performance issues.
It does show up a lot in the profiler when typing quickly.
I don't use it anyway, and my muscle memory always goes for the ESC key.
#+begin_src emacs-lisp :tangle packages.el
(package! evil-escape :disable t)
#+end_src
* Visual configuration
** Common
Maximize the window upon startup:
#+begin_src emacs-lisp
(add-to-list 'initial-frame-alist '(fullscreen . maximized))
#+end_src
Prevents some cases of Emacs flickering:
#+begin_src emacs-lisp
(add-to-list 'default-frame-alist '(inhibit-double-buffering . t))
#+end_src
Display fill column indicator.
#+begin_src emacs-lisp
(setq-default fill-column 120)
(setq fill-column 120)
(setq visual-fill-column-width fill-column)

(setq visual-fill-column-center-text t
      visual-fill-column-width fill-column)
(add-hook! 'prog-mode-hook #'display-fill-column-indicator-mode)
#+end_src
Add the keybinding to toggle the ~fill-column~.
#+begin_src emacs-lisp :tangle +bindings.el
(map! :leader
      :desc "Auto fill"
      :n "t a" 'auto-fill-mode)
#+end_src
Dim inactive windows.
#+begin_src emacs-lisp :tangle packages.el
(package! dimmer)
#+end_src
Configure ~dimmer~.
#+begin_src emacs-lisp
(dimmer-configure-magit)
(dimmer-configure-org)
(dimmer-mode t)
#+end_src

Set all-the-icons factor to 1.0 to prevent weird issues with the modeline.
#+begin_src emacs-lisp
(setq all-the-icons-scale-factor 1.0)
#+end_src
** Theme
I use =modus-themes=.
#+begin_src emacs-lisp :tangle packages.el
(package! modus-themes)
#+end_src
Configure =modus-themes=.
#+begin_src emacs-lisp
(setq doom-theme 'modus-operandi)

(use-package! modus-themes
  :init
  (setq modus-themes-completions 'moderate
        modus-themes-mode-line '(borderless accented)
        modus-themes-region 'accent-no-extend
        modus-themes-org-blocks 'tinted-background
        modus-themes-variable-pitch-headings t
        modus-themes-lang-checkers nil
        modus-themes-paren-match 'intense
        modus-themes-hl-line 'accented-background
        modus-themes-slanted-constructs t)
  (modus-themes-load-themes))

  (map! "<f5>" #'modus-themes-toggle)
#+end_src
Apply doom styles for themes and other components:
#+begin_src emacs-lisp
(after! doom-themes
  (setq
      doom-themes-enable-bold t     ; if nil, bold is universally disabled
      doom-themes-enable-italic t)  ; if nil, italics is universally disabled

      ;; Enable flashing mode-line on errors
      (doom-themes-visual-bell-config)
      (setq doom-themes-treemacs-theme "doom-colors")
      (doom-themes-treemacs-config)
      ;; Corrects (and improves) org-mode's native fontification.
      (doom-themes-org-config))
#+end_src
** Font
*** Set font size
#+begin_src emacs-lisp
(setq vitallium/font-size 30)
#+end_src
*** PragmataPro
I use [[https://fsd.it/shop/fonts/pragmatapro/][PragmataPro]] occasionally.
#+begin_src emacs-lisp :tangle no
(setq doom-font (font-spec :family "PragmataPro Mono Liga" :size 20)
   doom-big-font (font-spec :family "PragmataPro Mono Liga" :size 22)
   doom-variable-pitch-font (font-spec :family "PragmataPro Mono Liga" :size 20))
#+end_src
*** MonoLisa
But I use [[https://www.monolisa.dev/][MonoLisa]] now.
#+begin_src emacs-lisp
(setq doom-font (font-spec :family "MonoLisa" :size vitallium/font-size)
      doom-big-font (font-spec :family "MonoLisa" :size 32)
      doom-variable-pitch-font (font-spec :family "MonoLisa"))
#+end_src

Enable ligatures.
#+begin_src emacs-lisp :tangle packages.el
(package! ligature :recipe (:host github :repo "mickeynp/ligature.el"))
#+end_src

#+begin_src emacs-lisp
(after! ligature
  :config
  (ligature-set-ligatures 'prog-mode '("-->" "->" "->>" "-<" "--<"
                                       "-~" "]#" ".-" "!=" "!=="
                                       "#(" "#{" "#[" "#_" "#_("
                                       "/=" "/==" "|||" "||" ;; "|"
                                       "==" "===" "==>" "=>" "=>>"
                                       "=<<" "=/" ">-" ">->" ">="
                                       ">=>" "<-" "<--" "<->" "<-<"
                                       "<!--" "<|" "<||" "<|||"
                                       "<|>" "<=" "<==" "<==>" "<=>"
                                       "<=<" "<<-" "<<=" "<~" "<~>"
                                       "<~~" "~-" "~@" "~=" "~>"
                                       "~~" "~~>" ".=" "..=" "---"
                                       "{|" "[|" ".."  "..."  "..<"
                                       ".?"  "::" ":::" "::=" ":="
                                       ":>" ":<" ";;" "!!"  "!!."
                                       "!!!"  "?."  "?:" "??"  "?="
                                       "**" "***" "*>" "*/" "#:"
                                       "#!"  "#?"  "##" "###" "####"
                                       "#=" "/*" "/>" "//" "///"
                                       "&&" "|}" "|]" "$>" "++"
                                       "+++" "+>" "=:=" "=!=" ">:"
                                       ">>" ">>>" "<:" "<*" "<*>"
                                       "<$" "<$>" "<+" "<+>" "<>"
                                       "<<" "<<<" "</" "</>" "^="
                                       "%%" "'''" "\"\"\"" ))
  ;; Enables ligature checks globally in all buffers. You can also do it
  ;; per mode with `ligature-mode'.
  (global-ligature-mode t))
#+end_src
** Modeline
#+begin_src emacs-lisp
(defun doom-modeline-conditional-buffer-encoding ()
  "Only show text encoding when it's not UTF-8."
  (setq-local doom-modeline-buffer-encoding
              (unless (or (eq buffer-file-coding-system 'utf-8-unix)
                          (eq buffer-file-coding-system 'utf-8)))))

(add-hook 'after-change-major-mode-hook #'doom-modeline-conditional-buffer-encoding)

(after! doom-modeline
  (setq
   doom-modeline-checker-simple-format t
   doom-modeline-buffer-file-name-style 'relative-to-project
   doom-modeline-bar-width 6
   doom-modeline-icon t
   doom-modeline-major-mode-icon t
   doom-modeline-workspace-name t))

;; performance hack
(setq inhibit-compacting-font-caches t)
#+end_src
** Editor
Matching pairs draw with the same face color, making them easily identifiable.
#+begin_src emacs-lisp
(add-hook! prog-mode #'rainbow-delimiters-mode-enable)
#+end_src
* Navigation
** Windows
Navigating through emacs, across buffer.
#+begin_src emacs-lisp
(setq avy-all-windows t)
#+end_src
Switch to new window
#+begin_src emacs-lisp
(setq evil-vsplit-window-right t
      evil-split-window-below t)
#+end_src
** Opening links
I use [[https://github.com/abo-abo/ace-link][ace-link]] to quickly open links in the buffer:
#+begin_src emacs-lisp :tangle packages.el
(package! ace-link)
#+end_src

#+begin_src emacs-lisp
(use-package! ace-link
  :config
  (ace-link-setup-default))

(after! avy
  (setq avy-keys '(?a ?s ?d ?f ?j ?k ?l ?\;)))
#+end_src
** Workspaces
Always open up a new workspace when opening up a project.
#+begin_src emacs-lisp
(setq +workspaces-on-switch-project-behavior t)
#+end_src
** Projects
*** Scan directories for projects
#+begin_src emacs-lisp
(after! projectile
  :init
  (setq projectile-project-search-path '("~/Projects/"
                                         "~/Work"))
  :config
  ;; Auto discover when running switch project for the first time
  (add-transient-hook! 'projectile-switch-project
    (projectile-cleanup-known-projects)
    (projectile-discover-projects-in-search-path)))
#+end_src
* Key bindings
Use ~,~ as local leader.
#+begin_src emacs-lisp :tangle +bindings.el
(setq doom-localleader-key ",")
#+end_src

#+begin_src emacs-lisp :tangle +bindings.el
(after! lsp-ui
  (map! [remap xref-find-definitions] #'lsp-ui-peek-find-definitions
        [remap xref-find-references] #'lsp-ui-peek-find-references))
#+end_src

Window navigation without pressing the leader key.
#+begin_src emacs-lisp :tangle +bindings.el
(map!
 :en "C-h"   #'evil-window-left
 :en "C-j"   #'evil-window-down
 :en "C-k"   #'evil-window-up
 :en "C-l"   #'evil-window-right)

(map!
 :map (image-mode-map
       magit-diff-mode-map
       magit-revision-mode-map
       magit-status-mode-map
       evil-org-mode-map)
 :en "C-h"   #'evil-window-left
 :en "C-j"   #'evil-window-down
 :en "C-k"   #'evil-window-up
 :en "C-l"   #'evil-window-right)

(map!
 :map org-agenda-mode-map
 "C-h"  #'evil-window-left
 "C-j"  #'evil-window-down
 "C-k"  #'evil-window-up
 "C-l"  #'evil-window-right)

;; Undo / redo.
(map! :n "U" 'undo-tree-redo)
#+end_src

Toggle between light and dark =modus= themes.
#+begin_src emacs-lisp :tangle +bindings.el
(global-set-key (kbd "<f5>") 'modus-themes-toggle)
#+end_src

Enable Doom Hydra keybindings.
#+begin_src emacs-lisp :tangle +bindings.el
(map! :leader
      :desc "Navigate/Hydra"  :m "w N" #'+hydra/window-nav/body
      :desc "Text-Zoom/Hydra" :m "w f" #'+hydra/text-zoom/body)
#+end_src

#+begin_src emacs-lisp :tangle packages.el
(package! reverse-im)
#+end_src

#+begin_src emacs-lisp :tangle +bindings.el
(use-package reverse-im
  :config
  (reverse-im-activate "russian-computer"))
#+end_src
* Languages
** TreeSitter
Add ~tree-sitter~ packages.
#+begin_src emacs-lisp :tangle packages.el
(package! tree-sitter)
(package! tree-sitter-langs)
#+end_src

Enable ~tree-sitter~.
#+begin_src emacs-lisp
(use-package! tree-sitter
  :config
  (require 'tree-sitter-langs)
  (global-tree-sitter-mode)
  (add-hook 'tree-sitter-after-on-hook #'tree-sitter-hl-mode))
#+end_src
** JavaScript
~Jest~ is the most popular testing framework:
#+begin_src emacs-lisp :tangle packages.el
(package! jest)
#+end_src
Tell ~Jest~ to use ~yarn~:
#+begin_src emacs-lisp
(use-package! jest
  :after (js2-mode)
  :hook (js2-mode . jest-minor-mode)
  :config
  (setq jest-executable "yarn jest")
  (pushnew! evil-collection-mode-list 'jest-mode)
  (pushnew! evil-normal-state-modes 'jest-mode)
  (set-popup-rule! "^\\*jest\\*"
    :side 'right
    :size 0.5
    :select nil :quit 'current :ttl nil))
#+end_src
And enable it in ~js2~ mode:
#+begin_src emacs-lisp
(add-hook! (js2-mode
            rjsx-mode) #'jest-minor-mode)
#+end_src
Use ~web-mode~ for VueJS files.
#+begin_src emacs-lisp
(add-to-list 'auto-mode-alist '("\\.vue\\'" . web-mode))
#+end_src
*** Prettier
Enable prettier only if the configuration file found:
#+begin_src emacs-lisp
(defun maybe-use-prettier()
  "Enable prettier-js-mode if an rc file is located."
  (if (locate-dominating-file default-directory ".prettierrc")
      (format-all-mode)
      (setq +format-with-lsp nil)))

(add-hook!
  (js2-mode
   rjsx-mode
   typescript-mode
   web-mode)
   #'maybe-use-prettier)
#+end_src
*** Flycheck
Enable =ESLint= in =web-mode=
#+begin_src emacs-lisp
(after! flycheck
  (flycheck-add-mode 'javascript-eslint 'web-mode))
#+end_src
And use the =javascript-eslint= checker instead of =lsp=
#+begin_src emacs-lisp
(after! lsp-mode
  (remove-hook 'lsp-mode-hook #'+lsp-init-flycheck-or-flymake-h))

(defun +js/fix-checker ()
  "Fix LSP overwritten checkers."
  (interactive)
  (when (-contains? '(js2-mode rjsx-mode) major-mode)
    (flycheck-select-checker 'javascript-eslint)))

(add-hook 'lsp-mode-hook #'+js/fix-checker)
;; (setq-hook! 'js2-mode-hook flycheck-checker 'javascript-eslint)
#+end_src
Enable ~stylelint~ in ~web-mode~
#+begin_src emacs-lisp
(after! flycheck
  (flycheck-add-mode 'css-stylelint 'web-mode))
#+end_src
*** Vue.js
The language server ~VLS~ does not analyze the templates of ~.vue~ files by default, letâ€™s change that!
#+begin_src emacs-lisp
(after! lsp-vetur
  (setq! lsp-vetur-experimental-template-interpolation-service t))
#+end_src
** GraphQL
Add support for ~GraphQL~:
#+begin_src emacs-lisp :tangle packages.el
(package! graphql-mode)
#+end_src
** Ruby
*** Flycheck
Disable ~ruby-reek~.
#+begin_src emacs-lisp
(setq flycheck-disabled-checkers '(ruby-reek))
#+end_src
Always execute ~rubocop~ with ~bundle exec~.
#+begin_src emacs-lisp
(add-hook! 'ruby-mode-hook (setq-local flycheck-checker 'ruby-rubocop))
(add-hook 'ruby-mode-hook
  (lambda ()
    (setq-local flycheck-command-wrapper-function
                (lambda (command) (append '("bundle" "exec") command)))))
#+end_src
*** LSP
Add ~asdf~ dir to the library path:
#+begin_src emacs-lisp
(after! lsp-solargraph
  (add-to-list 'lsp-solargraph-library-directories "~/.asdf/installs/ruby"))
#+end_src
** Go
Use ~goimports~ for formatting
#+begin_src emacs-lisp
(setq gofmt-command "goimports")
#+end_src
Format file before saving it
#+begin_src emacs-lisp
(add-hook! go-mode-hook #'gofmt-before-save)
#+end_src
* LSP
** Enable/disable some LSP features
#+begin_src emacs-lisp
;; Lsp optimization
(setq read-process-output-max (* 1024 1024)) ;; 1mb

;; disable symbol highlighting
(setq lsp-enable-symbol-highlighting t)

(after! lsp
  (setq lsp-prefer-flymake nil
        lsp-eslint-package-manager "yarn"))
(after! lsp-ui
  (setq lsp-ui-sideline-show-code-actions nil))
#+end_src
** Flycheck
Show errors inline so they never overlap with code.
#+begin_src emacs-lisp :tangle packages.el
(package! flycheck-inline)
(package! flycheck-posframe :disable t)
(package! flycheck-popup-tip :disable t)
#+end_src

#+begin_src emacs-lisp
(use-package! flycheck-inline
  :hook (flycheck-mode . flycheck-inline-mode))

(setq flycheck-check-syntax-automatically '(save idle-change))
#+end_src
* Org
** Packages
#+begin_src emacs-lisp :tangle packages.el
(package! org-gitlab :recipe (:host gitlab :repo "to1ne/org-gitlab"))
(package! ob-graphql)
(package! org-super-agenda)
(package! org-download)
#+end_src
** Setup =org= directories
#+begin_src emacs-lisp
(setq org-directory "~/Org/"
      org-archive-location (concat org-directory ".archive/%s::"))
#+end_src
** Configure ~org~
Configure ~org-super-agenda~.
#+begin_src emacs-lisp
(use-package! org-super-agenda
  :hook (org-agenda-mode . org-super-agenda-mode))

(setq org-agenda-skip-scheduled-if-done t
      org-agenda-skip-deadline-if-done t
      org-agenda-include-deadlines t
      org-agenda-include-diary t
      org-agenda-block-separator nil
      org-agenda-compact-blocks t
      org-agenda-start-with-log-mode t
      org-agenda-start-day nil)
#+end_src

Add ~org-journal~ files to agenda.
#+begin_src emacs-lisp
(use-package! org-journal
  :config
  (setq org-journal-dir "~/Org/Journal"
        org-journal-date-prefix "#+TITLE: "
        org-journal-file-format "%Y-%m-%d.org"
        org-journal-date-format "%A, %d %B %Y")
  :custom
  (org-journal-enable-agenda-integration t))
#+end_src

Configure ~deft~.
#+begin_src emacs-lisp
(use-package! deft
  :custom
  (deft-directory "~/Notes")
  (deft-recursive t)
  (deft-use-filter-string-for-filename t)
  (deft-default-extension "org"))
#+end_src

Enable ~mixed-pitch-mode~, ~org-appear-mode~ and ~org-pretty-mode~.
#+begin_src emacs-lisp
(after! org
  (add-hook! 'org-mode-hook :append
            #'mixed-pitch-mode
            #'org-appear-mode
            #'+org-pretty-mode
            #'visual-line-mode))
#+end_src

#+begin_src emacs-lisp :tangle packages.el
(package! org-appear :recipe (:host github :repo "awth13/org-appear"))
(package! org-ol-tree :recipe (:host github :repo "Townk/org-ol-tree"))
#+end_src

#+begin_src emacs-lisp
(use-package! org-appear
  :hook (org-mode . org-appear-mode)
  :config
  (setq org-appear-autoemphasis t
        org-appear-autosubmarkers t
        org-appear-autolinks nil)
  ;; for proper first-time setup, `org-appear--set-elements'
  ;; needs to be run after other hooks have acted.
  (run-at-time nil nil #'org-appear--set-elements))

(use-package! org-ol-tree
  :commands org-ol-tree)
(map! :map org-mode-map
      :after org
      :localleader
      :desc "Outline" "O" #'org-ol-tree)
#+end_src
** Roam
#+begin_src emacs-lisp
(after! org-roam
  (setq org-roam-directory "~/Roam"))
#+end_src
* Mail
** mu4e
Load the system version of =mu4e.=
#+begin_src emacs-lisp
(add-to-list 'load-path "/usr/local/share/emacs/site-lisp/mu4e")
#+end_src

General configuration.
#+begin_src emacs-lisp
(after! mu4e
  (setq mu4e-get-mail-command "mbsync -c ~/.config/isync/mbsyncrc -a"
        ;; Refresh mail using isync every 10 minutes
        mu4e-update-interval (* 10 60)
        ;; This is set to 't' to avoid mail syncing issues when using mbsync
        mu4e-change-filenames-when-moving t
        mu4e-root-maildir "~/Mail"
        shr-use-colors nil))
#+end_src
** Setup accounts
*** Personal
#+begin_src emacs-lisp
(after! mu4e
  (set-email-account! "fastmail"
                      '((mu4e-sent-folder       . "/fastmail/Sent")
                        (mu4e-drafts-folder     . "/fastmail/Drafts")
                        (mu4e-trash-folder      . "/fastmail/Trash")
                        (mu4e-refile-folder     . "/fastmail/Archive")
                        (smtpmail-smtp-user     . "vitaly_slobodin@fastmail.com"))
                      t))
#+end_src
*** Work (GitLab)
#+begin_src emacs-lisp
(after! mu4e
  (set-email-account! "gitlab"
                      '((mu4e-sent-folder       . "/gitlab/Sent")
                        (mu4e-drafts-folder     . "/gitlab/Drafts")
                        (mu4e-trash-folder      . "/gitlab/Trash")
                        (mu4e-refile-folder     . "/gitlab/Archive")
                        (smtpmail-smtp-user     . "vslobodin@gitlab.com"))
                      t)

  (add-to-list 'mu4e-bookmarks
               (make-mu4e-bookmark
                :name "GitLab Inbox"
                :query "maildir:\"/gitlab/Inbox\""
                :key ?i)))
#+end_src
** Setup =mu4e-alert= for notifications
*** Packages
#+begin_src emacs-lisp :tangle packages.el
(package! mu4e-alert)
#+end_src
*** Configuration
#+begin_src emacs-lisp
(use-package! mu4e-alert
  :after mu4e
  :init
  (setq doom-modeline-mu4e t)
  (mu4e-alert-set-default-style (if IS-MAC 'notifier 'notifications))
  (setq mu4e-alert-interesting-mail-query "flag:unread AND maildir:\"/gitlab/Inbox\"")
  (mu4e-alert-enable-notifications)
  (mu4e-alert-enable-mode-line-display))
#+end_src
* Completion
** Company
Disable auto-complete
#+begin_src emacs-lisp
(after! company
  (setq company-idle-delay nil
        company-selection-wrap-around t
        company-show-numbers t
        company-require-match nil
        company-dabbrev-minimum-length 2
        company-search-regexp-function #'company-search-flex-regexp))
#+end_src
** TabNine
Add ~tabnine~ package.
#+begin_src emacs-lisp :tangle no
(package! company-tabnine :recipe (:host github :repo "TommyX12/company-tabnine"))
#+end_src

Configure ~tabnine~.
#+begin_src emacs-lisp :tangle no
(after! company
  (setq +lsp-company-backends '(company-tabnine :separate company-capf company-yasnippet))
  (setq company-show-numbers t)
  (setq company-idle-delay 0))
#+end_src
* Spelling
** Flyspell
Correct popup
#+begin_src emacs-lisp
(after! flyspell
  (setq flyspell-correct-popup t))
#+end_src
** ispell
Setup multidictionary
#+begin_src emacs-lisp
(after! ispell
  (setq ispell-program-name (executable-find "hunspell"))
  (ispell-set-spellchecker-params)
  (ispell-hunspell-add-multi-dic "en_US,ru_RU")
  (setq ispell-dictionary "en_US,ru_RU"))
#+end_src
** Vale
#+begin_src emacs-lisp :tangle no
(after! flycheck
  (flycheck-define-checker vale
    "A checker for prose"
    :command ("vale" "--output" "line" "--no-wrap"
              source)
    :standard-input nil
    :error-patterns
      ((error line-start (file-name) ":" line ":" column ":" (id (one-or-more (not (any ":")))) ":" (message)   line-end))
    :modes (markdown-mode org-mode text-mode)
    :next-checkers ((t . markdown-markdownlint-cli))
  )

  (add-to-list 'flycheck-checkers 'vale))
#+end_src
** LanguageTool
#+begin_src emacs-lisp
(setq! langtool-bin "languagetool-commandline")
(setq! langtool-mother-tongue "en")
#+end_src
* Magit
** Basic configuration
#+begin_src emacs-lisp
(setq magit-save-repository-buffers nil
      magit-display-file-buffer-function #'switch-to-buffer-other-window
      magithub-preferred-remote-method 'ssh_url
      magit-diff-refine-hunk 'all
      magit-revision-show-gravatars '("^Author:     " . "^Commit:     "))
#+end_src
** Integration with delta
TODO: Does not work yet
#+begin_src emacs-lisp :tangle no
(add-hook! 'magit-mode-hook (lambda () (magit-delta-mode +1)))
#+end_src
** Working with GIT
Easy copy links to files
#+begin_src emacs-lisp :tangle packages.el
(package! git-link)
#+end_src
* Dired
** Prettify it
#+begin_src emacs-lisp
(after! dired
  (setq dired-listing-switches "-aBhl  --group-directories-first"
        dired-dwim-target t
        dired-recursive-copies (quote always)
        dired-recursive-deletes (quote top)))
#+end_src
** Add narrow mode
#+begin_src emacs-lisp :tangle packages.el
(package! dired-narrow)
#+end_src

#+begin_src emacs-lisp
(use-package! dired-narrow
  :commands (dired-narrow-fuzzy)
  :init
  (map! :map dired-mode-map
        :desc "narrow" "/" #'dired-narrow-fuzzy))
#+end_src
* Cloud
** Vagrant
#+begin_src emacs-lisp :tangle packages.el
(package! vagrant-tramp)
#+end_src
